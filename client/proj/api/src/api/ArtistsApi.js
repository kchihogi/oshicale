/**
 * 推しカレ
 * 推しカレのAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sample@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Artist from '../model/Artist';
import PaginatedArtistList from '../model/PaginatedArtistList';
import PatchedArtist from '../model/PatchedArtist';

/**
* Artists service.
* @module api/ArtistsApi
* @version 1.0.0
*/
export default class ArtistsApi {

    /**
    * Constructs a new ArtistsApi. 
    * @alias module:api/ArtistsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the artistsCreate operation.
     * @callback module:api/ArtistsApi~artistsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Artist} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new artist
     * Creating a new artist is allowed for authenticated users.
     * @param {module:model/Artist} artist 
     * @param {module:api/ArtistsApi~artistsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Artist}
     */
    artistsCreate(artist, callback) {
      let postBody = artist;
      // verify the required parameter 'artist' is set
      if (artist === undefined || artist === null) {
        throw new Error("Missing the required parameter 'artist' when calling artistsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Artist;
      return this.apiClient.callApi(
        '/artists/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the artistsDestroy operation.
     * @callback module:api/ArtistsApi~artistsDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an artist
     * Deleting an artist is allowed for authenticated users.
     * @param {Number} id A unique integer value identifying this artist.
     * @param {module:api/ArtistsApi~artistsDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    artistsDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling artistsDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/artists/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the artistsList operation.
     * @callback module:api/ArtistsApi~artistsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedArtistList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all artists
     * Listing all artists is allowed for authenticated users.
     * @param {Object} opts Optional parameters
     * @param {String} [description] Filter by description
     * @param {String} [name] Filter by name
     * @param {Number} [page] A page number within the paginated result set.
     * @param {module:api/ArtistsApi~artistsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedArtistList}
     */
    artistsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'description': opts['description'],
        'name': opts['name'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedArtistList;
      return this.apiClient.callApi(
        '/artists/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the artistsPartialUpdate operation.
     * @callback module:api/ArtistsApi~artistsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Artist} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partially update an artist
     * Partially updating an artist is allowed for authenticated users.
     * @param {Number} id A unique integer value identifying this artist.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedArtist} [patchedArtist] 
     * @param {module:api/ArtistsApi~artistsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Artist}
     */
    artistsPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedArtist'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling artistsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Artist;
      return this.apiClient.callApi(
        '/artists/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the artistsRetrieve operation.
     * @callback module:api/ArtistsApi~artistsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Artist} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an artist
     * Retrieving an artist is allowed for authenticated users.
     * @param {Number} id A unique integer value identifying this artist.
     * @param {module:api/ArtistsApi~artistsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Artist}
     */
    artistsRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling artistsRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Artist;
      return this.apiClient.callApi(
        '/artists/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the artistsUpdate operation.
     * @callback module:api/ArtistsApi~artistsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Artist} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an artist
     * Updating an artist is allowed for authenticated users.
     * @param {Number} id A unique integer value identifying this artist.
     * @param {module:model/Artist} artist 
     * @param {module:api/ArtistsApi~artistsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Artist}
     */
    artistsUpdate(id, artist, callback) {
      let postBody = artist;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling artistsUpdate");
      }
      // verify the required parameter 'artist' is set
      if (artist === undefined || artist === null) {
        throw new Error("Missing the required parameter 'artist' when calling artistsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Artist;
      return this.apiClient.callApi(
        '/artists/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
