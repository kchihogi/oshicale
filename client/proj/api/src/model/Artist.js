/**
 * 推しカレ
 * 推しカレのAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sample@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Artist model module.
 * @module model/Artist
 * @version 1.0.0
 */
class Artist {
    /**
     * Constructs a new <code>Artist</code>.
     * Serializer for the artist model.
     * @alias module:model/Artist
     * @param id {Number} 
     * @param href {String} 
     * @param name {String} アーティスト名を入力してください。
     * @param artistEvents {Array.<String>} 
     */
    constructor(id, href, name, artistEvents) { 
        
        Artist.initialize(this, id, href, name, artistEvents);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, href, name, artistEvents) { 
        obj['id'] = id;
        obj['href'] = href;
        obj['name'] = name;
        obj['artist_events'] = artistEvents;
    }

    /**
     * Constructs a <code>Artist</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Artist} obj Optional instance to populate.
     * @return {module:model/Artist} The populated <code>Artist</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Artist();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('href')) {
                obj['href'] = ApiClient.convertToType(data['href'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('artist_events')) {
                obj['artist_events'] = ApiClient.convertToType(data['artist_events'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Artist</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Artist</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Artist.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['artist_events'])) {
            throw new Error("Expected the field `artist_events` to be an array in the JSON data but got " + data['artist_events']);
        }

        return true;
    }


}

Artist.RequiredProperties = ["id", "href", "name", "artist_events"];

/**
 * @member {Number} id
 */
Artist.prototype['id'] = undefined;

/**
 * @member {String} href
 */
Artist.prototype['href'] = undefined;

/**
 * アーティスト名を入力してください。
 * @member {String} name
 */
Artist.prototype['name'] = undefined;

/**
 * アーティストの説明を入力してください。
 * @member {String} description
 */
Artist.prototype['description'] = undefined;

/**
 * @member {Array.<String>} artist_events
 */
Artist.prototype['artist_events'] = undefined;






export default Artist;

